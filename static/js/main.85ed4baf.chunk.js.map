{"version":3,"sources":["components/NavBar/NavBar.js","components/Header/Header.js","components/CharacterCard/CharacterCard.js","App.js","serviceWorker.js","index.js"],"names":["NavBar","props","react_default","a","createElement","className","concat","correctGuess","gameOver","onAnimationEnd","e","target","guessComplete","message","currentScore","topScore","Header","CharacterCard","_this","this","resetGame","alt","src","image","id","onClick","userGuessed","Component","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","shuffle","characters","state","slice","length","randomIndex","Math","floor","random","push","splice","setState","console","log","guesses","includes","correctAnswer","newGuesses","_this2","NavBar_NavBar","Header_Header","map","components_CharacterCard_CharacterCard","key","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.85ed4baf.chunk.js","sourcesContent":["import React from 'react';\r\nimport './styles.css';\r\n\r\nfunction NavBar(props) {\r\n  return (\r\n    <div className=\"navbar-fixed\">\r\n      <nav>\r\n        <div className=\"nav-wrapper blue-grey lighten-2\">\r\n          <h1 className=\"brand-logo left\">Clicky Game</h1>\r\n          <span \r\n            className={`user-guess center ${ props.correctGuess ? 'right-guess' : props.gameOver ? 'wrong-guess' : ''}`}\r\n            onAnimationEnd={e => {e.target.className = 'user-guess center'; props.guessComplete()}}\r\n          >\r\n          {props.message}\r\n          </span>\r\n          <ul className=\"right score-container\">\r\n            <li className=\"score-text\">Score: {props.currentScore}</li>\r\n            <li className=\"score-text\"><span>|</span></li>\r\n            <li className=\"score-text\">Top Score: {props.topScore}</li>\r\n          </ul>\r\n        </div>\r\n      </nav>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default NavBar;","import React from 'react';\r\nimport './styles.css';\r\n\r\nfunction Header(props) {\r\n  return (\r\n    <div className=\"header card-panel grey lighten-2\">\r\n        <h2>Clicky Game!</h2>\r\n        <span>Click on an image to earn points, but don't click on any more than once!</span>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Header;","import React, {Component} from 'react';\r\nimport './styles.css';\r\n\r\nclass CharacterCard extends Component {\r\n\r\n    render() {\r\n        return (\r\n            <div \r\n                className={`card ${this.props.gameOver ? \"shake\" : \"\"}`}\r\n                onAnimationEnd={this.props.resetGame}>\r\n                <img \r\n                    className=\"character-portrait\"\r\n                    alt=\"Character portrait\" \r\n                    src={this.props.image} \r\n                    id={this.props.id}\r\n                    onClick={(e) => this.props.gameOver ? null : this.props.userGuessed(e.target.id)}\r\n                    \r\n                    />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default CharacterCard;","import React, { Component } from 'react';\r\nimport NavBar from './components/NavBar/NavBar';\r\nimport Header from './components/Header/Header';\r\nimport CharacterCard from './components/CharacterCard/CharacterCard';\r\nimport './App.css';\r\nimport characters from './characters.json';\r\n\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      currentScore: 0,\r\n      topScore: 0,\r\n      correctAnswer: false,\r\n      gameOver: false,\r\n      message: 'Click on a character to start',\r\n      characters: characters,\r\n      guesses: []\r\n    }\r\n  }\r\n\r\n  componentWillMount() {\r\n    this.shuffle();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <NavBar \r\n          currentScore={this.state.currentScore}\r\n          topScore={this.state.topScore}\r\n          correctGuess={this.state.correctAnswer}\r\n          guessComplete={this.guessComplete}\r\n          gameOver={this.state.gameOver}\r\n          message={this.state.message}\r\n         />\r\n        <Header />\r\n        <div className=\"container\">\r\n          <div className=\"flex-row\">\r\n            {this.state.characters.map(e => <CharacterCard \r\n              key={e.id}\r\n              id={e.id}\r\n              image={e.image}\r\n              userGuessed={this.userGuessed}\r\n              gameOver={this.state.gameOver}\r\n              resetGame={this.resetGame}\r\n              />) }\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  shuffle = () => {\r\n    let shuffle = [];\r\n    let characters = this.state.characters.slice();\r\n    \r\n    while(characters.length > 0) {\r\n      let randomIndex = Math.floor(Math.random() * characters.length);\r\n      shuffle.push(characters.splice(randomIndex, 1)[0]);\r\n    }\r\n    \r\n    this.setState({characters: shuffle});\r\n  }\r\n\r\n  userGuessed = (id) => {\r\n    console.log(id);\r\n    if(this.state.guesses.includes(id)) {\r\n      console.log('Already guessed');\r\n      this.setState({\r\n        gameOver: true,\r\n        correctAnswer: false,\r\n        message: 'You already picked this character',\r\n      });\r\n    } else {\r\n      let newGuesses = this.state.guesses;\r\n      newGuesses.push(id);\r\n      this.setState({\r\n          currentScore: this.state.currentScore + 1,\r\n          correctAnswer: true,\r\n          message: 'You guessed correctly!',\r\n          guesses: newGuesses\r\n        });\r\n    }\r\n    this.shuffle();\r\n  }\r\n\r\n  guessComplete = () => {\r\n    this.setState({correctAnswer: false});\r\n  }\r\n\r\n  resetGame = () => {\r\n    this.setState({\r\n      currentScore: 0,\r\n      topScore: this.state.currentScore > this.state.topScore ? this.state.currentScore : this.state.topScore,\r\n      gameOver: false,\r\n      message: 'Click on a character to start',\r\n      guesses: []\r\n    });\r\n  }\r\n\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}